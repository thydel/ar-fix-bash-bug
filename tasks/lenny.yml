---

- local_action: "{{ item }}"
  with_items:
    - runp
    - ansible_version
  name: lenny - utils modules

- set_fact:
    bash_tar_url: '{{ bash_url }}/bash-{{ bash_version }}.tar.gz'
    bash_patches: '{{ bash_url }}/bash-{{ bash_version }}-patches'
    bash_base: '{{ fix_bash_bug_src }}/bash-{{ bash_version }}'
  name: lenny - local

- apt: name={{ item }}
  with_items:
    - gcc
    - bison
  name: lenny - install gcc and bison

- stat: path={{ bash_base }}.tar.gz
  register: tgz
  name: lenny - register tgz file

- when: fix_bash_bug_proxy and not tgz.stat.exists
  get_url:
    url={{ bash_tar_url }}
    dest={{ fix_bash_bug_src }}
  environment: 
    http_proxy: "{{ fix_bash_bug_proxy }}"
  name: lenny - get bash sources using proxy

- when: not fix_bash_bug_proxy and not tgz.stat.exists
  get_url:
    url={{ bash_tar_url }}
    dest={{ fix_bash_bug_src }}
  name: lenny - get bash sources

- when: run_mode
  unarchive:
    src={{ bash_base }}.tar.gz
    dest={{ fix_bash_bug_src }}
    creates={{ bash_base }}
    copy=no
  name: lenny - untar bash sources

- stat: path={{ bash_base }}/bash32-0{{ last_patch_number }}
  register: last_patch_file
  name: lenny - register last patch file

- when: fix_bash_bug_proxy and not last_patch_file.stat.exists
  with_sequence: start=1 end={{ last_patch_number }} format=%03g
  get_url:
    url={{ bash_patches }}/bash32-{{ item }}
    dest={{ bash_base }}
  environment: 
    http_proxy: "{{ fix_bash_bug_proxy }}"
  name: lenny - get bash patches using proxy

- when: not fix_bash_bug_proxy and not last_patch_file.stat.exists
  with_sequence: start=1 end={{ last_patch_number }} format=%03g
  get_url:
    url={{ bash_patches }}/bash32-{{ item }}
    dest={{ bash_base }}
  name: lenny - get bash patches

- stat: path={{ bash_base }}
  register: dir
  always_run: True
  name: lenny - register base dir

- fail: msg='cant continue dry run without untaring bash sources files'
  when: dry_mode and dir.stat.isdir is not defined
  name: lenny - assert base dir

- stat: path={{ bash_base }}/patchlevel.h
  register: patchlevel
  always_run: True
  name: lenny - register patchlevel file

- when: patchlevel.stat.exists
  always_run: True
  command:
    awk -- '/#define PATCHLEVEL /{print $3}' patchlevel.h
    chdir={{ bash_base }}
  register: patchlevel
  changed_when: False
  name: lenny - get patchlevel

- fail: msg='cant continue dry run without downloading patch files'
  when: dry_mode and not last_patch_file.stat.exists
  name: lenny - assert last patch file

# - name: lenny - apply bash patches
#   with_sequence: start=1 end={{ last_patch_number }} format=%03g
#   when: and item|int >= patchlevel.stdout|int
#   patch:
#     patchfile=bash32-{{ item }}
#     basedir={{ bash_base }}

- name: lenny - apply bash patches
  with_sequence:
    start={{ patchlevel.stdout }}
    end={{ last_patch_number }}
    format=%03g
  patch:
    patchfile=bash32-{{ item }}
    basedir={{ bash_base }}

- command:
    chdir={{ bash_base }}
    creates=Makefile
    ./configure
  name: lenny - configure once

- when: configure|default(False)
  command:
    chdir={{ bash_base }}
    ./configure
  name: lenny - configure again

- command:
    chdir={{ bash_base }}
    creates=/usr/local/bin/bash
    make install
  name: lenny - compile and install once

- when: compile|default(False)
  command:
    chdir={{ bash_base }}
    make install
  name: lenny - compile and install again

- set_fact:
    install: install -pbS .shellshock  /usr/local/bin/bash /bin/bash
    mode: '0400'
  name: lenny - local facts

- when: ansible_version | version_compare('1.8', '>=')
  set_fact: mode=a-x
  name: lenny - local facts

- command:
    creates=/bin/bash.shellshock
    {{ install }}
  name: lenny - install patched one once

- when: compile|default(False)
  command: |
    {{ install }}
  name: lenny - install patched one again

- file: path=/bin/bash.shellshock mode={{ mode }}
  name: lenny - paranoid last step
